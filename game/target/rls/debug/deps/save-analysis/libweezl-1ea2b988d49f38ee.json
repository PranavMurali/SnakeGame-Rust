{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3","program":"C:\\Users\\Pranav\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","weezl","--edition=2018","C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=1ea2b988d49f38ee","-C","extra-filename=-1ea2b988d49f38ee","--out-dir","f:\\Rust\\SnakeGame-Rust\\game\\target\\rls\\debug\\deps","-L","dependency=f:\\Rust\\SnakeGame-Rust\\game\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Pranav\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"f:\\Rust\\SnakeGame-Rust\\game\\target\\rls\\debug\\deps\\libweezl-1ea2b988d49f38ee.rmeta"},"prelude":{"crate_id":{"name":"weezl","disambiguator":[12896758922237942092,15356839114746281787]},"crate_root":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src","external_crates":[{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[1921591330338517602,8002743023817837766]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","num":2,"id":{"name":"core","disambiguator":[3294562336267099064,32966444439847392]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8997478989526601172,15466949633016966289]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[2630917957276446109,8658156290826251556]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16592919627580665262,9528133364691589515]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12745094628986209607,10518202857406436678]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12421643217715303902,5448498891032173630]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[10471275659107711445,16777480585464664117]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[5556840401016198219,10246883469141694681]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5351773000290944944,5461204872568622329]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[1406896991597352872,16715998803959789672]}},{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[16017799561494711091,10322761666972095232]}}],"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":0,"byte_end":4098,"line_start":1,"line_end":119,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":3290,"byte_end":3302,"line_start":92,"line_end":92,"column_start":22,"column_end":34},"alias_span":null,"name":"StreamResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":3326,"byte_end":3338,"line_start":93,"line_end":93,"column_start":23,"column_end":35},"alias_span":null,"name":"BufferResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":3340,"byte_end":3348,"line_start":93,"line_end":93,"column_start":37,"column_end":45},"alias_span":null,"name":"LzwError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":3350,"byte_end":3359,"line_start":93,"line_end":93,"column_start":47,"column_end":56},"alias_span":null,"name":"LzwStatus","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":0,"byte_end":4098,"line_start":1,"line_end":119,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":336},{"krate":0,"index":344},{"krate":0,"index":343},{"krate":0,"index":341},{"krate":0,"index":8},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":169},{"krate":0,"index":319},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335}],"decl_id":null,"docs":" # LZW decoder and encoder","sig":null,"attributes":[{"value":"/ # LZW decoder and encoder","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":0,"byte_end":29,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":30,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crates provides an `Encoder` and a `Decoder` in their respective modules. The code words","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":34,"byte_end":131,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ are written from and to bit byte slices (or streams) where it is possible to write either the","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":132,"byte_end":229,"line_start":4,"line_end":4,"column_start":1,"column_end":98}},{"value":"/ most or least significant bits first. The maximum possible code size is 12 bits, the smallest","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":230,"byte_end":327,"line_start":5,"line_end":5,"column_start":1,"column_end":98}},{"value":"/ available code size is 2 bits.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":328,"byte_end":362,"line_start":6,"line_end":6,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":363,"byte_end":366,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The de- and encoder expect the LZW stream to start with a clear code and end with an","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":367,"byte_end":455,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ end code which are defined as follows:","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":456,"byte_end":498,"line_start":9,"line_end":9,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":499,"byte_end":502,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/  * `CLEAR_CODE == 1 << min_code_size`","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":503,"byte_end":544,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/  * `END_CODE   == CLEAR_CODE + 1`","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":545,"byte_end":582,"line_start":12,"line_end":12,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":583,"byte_end":586,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ For optimal performance, all buffers and input and output slices should be as large as possible","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":587,"byte_end":686,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"/ and at least 2048 bytes long. This extends to input streams which should have similarly sized","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":687,"byte_end":784,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ buffers. This library uses Rust's standard allocation interfaces (`Box` and `Vec` to be","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":785,"byte_end":876,"line_start":16,"line_end":16,"column_start":1,"column_end":92}},{"value":"/ precise). Since there are no ways to handle allocation errors it is not recommended to operate","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":877,"byte_end":975,"line_start":17,"line_end":17,"column_start":1,"column_end":99}},{"value":"/ it on 16-bit targets.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":976,"byte_end":1001,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1002,"byte_end":1005,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Exemplary use of the encoder:","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1006,"byte_end":1039,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1040,"byte_end":1043,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ use weezl::{BitOrder, encode::Encoder};","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1141,"byte_end":1184,"line_start":24,"line_end":24,"column_start":1,"column_end":44}},{"value":"/ let size = 8;","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1185,"byte_end":1202,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/ let data = b\"TOBEORNOTTOBEORTOBEORNOT\";","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1203,"byte_end":1246,"line_start":26,"line_end":26,"column_start":1,"column_end":44}},{"value":"/ let mut compressed = vec![];","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1247,"byte_end":1279,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1280,"byte_end":1283,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let mut enc = Encoder::new(BitOrder::Msb, size);","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1284,"byte_end":1336,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/ let result = enc.into_stream(&mut compressed).encode(&data[..]);","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1337,"byte_end":1405,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/ result.status.unwrap();","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1406,"byte_end":1433,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1434,"byte_end":1441,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1442,"byte_end":1445,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The main algorithm can be used in `no_std` as well, although it requires an allocator. This","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1446,"byte_end":1541,"line_start":34,"line_end":34,"column_start":1,"column_end":96}},{"value":"/ restriction might be lifted at a later stage. For this you should deactivate the `std` feature.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1542,"byte_end":1641,"line_start":35,"line_end":35,"column_start":1,"column_end":100}},{"value":"/ The main interfaces stay intact but the `into_stream` combinator is no available.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1642,"byte_end":1727,"line_start":36,"line_end":36,"column_start":1,"column_end":86}},{"value":"forbid(unsafe_code)","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1771,"byte_end":1794,"line_start":38,"line_end":38,"column_start":1,"column_end":24}},{"value":"forbid(missing_docs)","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":1795,"byte_end":1819,"line_start":39,"line_end":39,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":2670,"byte_end":2673,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"Msb","qualname":"::BitOrder::Msb","value":"BitOrder::Msb","parent":{"krate":0,"index":336},"children":[],"decl_id":null,"docs":" The most significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The most significant bit is processed first.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":2617,"byte_end":2665,"line_start":62,"line_end":62,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":2733,"byte_end":2736,"line_start":65,"line_end":65,"column_start":5,"column_end":8},"name":"Lsb","qualname":"::BitOrder::Lsb","value":"BitOrder::Lsb","parent":{"krate":0,"index":336},"children":[],"decl_id":null,"docs":" The least significant bit is processed first.\n","sig":null,"attributes":[{"value":"/ The least significant bit is processed first.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":2679,"byte_end":2728,"line_start":64,"line_end":64,"column_start":5,"column_end":54}}]},{"kind":"Enum","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":2602,"byte_end":2610,"line_start":61,"line_end":61,"column_start":10,"column_end":18},"name":"BitOrder","qualname":"::BitOrder","value":"pub enum BitOrder {\n\n    /// The most significant bit is processed first.\n    Msb,\n\n    /// The least significant bit is processed first.\n    Lsb,\n}","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":339}],"decl_id":null,"docs":" The order of bits in bytes.\n","sig":null,"attributes":[{"value":"/ The order of bits in bytes.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":2531,"byte_end":2562,"line_start":59,"line_end":59,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decode","qualname":"::decode","value":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":451},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":47},{"krate":0,"index":346},{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":363},{"krate":0,"index":52},{"krate":0,"index":61},{"krate":0,"index":73},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":91},{"krate":0,"index":111},{"krate":0,"index":116},{"krate":0,"index":125},{"krate":0,"index":131},{"krate":0,"index":141},{"krate":0,"index":151},{"krate":0,"index":157},{"krate":0,"index":166}],"decl_id":null,"docs":" A module for all decoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":3149,"byte_end":3174,"line_start":85,"line_end":85,"column_start":1,"column_end":26}},{"value":"/ A module for all decoding needs.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4100,"byte_end":4136,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4746,"byte_end":4753,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::decode::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":39}],"decl_id":null,"docs":" The state for decoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for decoding data with an LZW algorithm.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4442,"byte_end":4496,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4497,"byte_end":4500,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4501,"byte_end":4598,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose or skip any","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4599,"byte_end":4694,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ already decode data in the process.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4695,"byte_end":4734,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":5144,"byte_end":5154,"line_start":30,"line_end":30,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::decode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" A decoding stream sink.","sig":null,"attributes":[{"value":"/ A decoding stream sink.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4806,"byte_end":4833,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4834,"byte_end":4837,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ See [`Decoder::into_stream`] on how to create this type.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4838,"byte_end":4898,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4899,"byte_end":4902,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`Decoder::into_stream`]: struct.Decoder.html#method.into_stream","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":4903,"byte_end":4971,"line_start":24,"line_end":24,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8058,"byte_end":8061,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new decoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7627,"byte_end":7697,"line_start":125,"line_end":125,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7702,"byte_end":7705,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7710,"byte_end":7803,"line_start":127,"line_end":127,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to decode","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7808,"byte_end":7902,"line_start":128,"line_end":128,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7907,"byte_end":7956,"line_start":129,"line_end":129,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7961,"byte_end":7964,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7969,"byte_end":7981,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7986,"byte_end":7989,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `2..=12`.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7994,"byte_end":8046,"line_start":133,"line_end":133,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8890,"byte_end":8911,"line_start":154,"line_end":154,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Decoder>::with_tiff_size_switch","value":"pub fn with_tiff_size_switch(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible decoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible decoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8448,"byte_end":8530,"line_start":145,"line_end":145,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8535,"byte_end":8538,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8543,"byte_end":8636,"line_start":147,"line_end":147,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8641,"byte_end":8734,"line_start":148,"line_end":148,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8739,"byte_end":8788,"line_start":149,"line_end":149,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8793,"byte_end":8796,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8801,"byte_end":8813,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8818,"byte_end":8821,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `2..=12`.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":8826,"byte_end":8878,"line_start":153,"line_end":153,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10289,"byte_end":10301,"line_start":187,"line_end":187,"column_start":12,"column_end":24},"name":"decode_bytes","qualname":"<Decoder>::decode_bytes","value":"pub fn decode_bytes(&mut Self, &[u8], &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Decode some bytes from `inp` and write result to `out`.","sig":null,"attributes":[{"value":"/ Decode some bytes from `inp` and write result to `out`.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":9514,"byte_end":9573,"line_start":173,"line_end":173,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":9578,"byte_end":9581,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This will consume a prefix of the input buffer and write decoded output into a prefix of","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":9586,"byte_end":9678,"line_start":175,"line_end":175,"column_start":5,"column_end":97}},{"value":"/ the output buffer. See the respective fields of the return value for the count of consumed","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":9683,"byte_end":9777,"line_start":176,"line_end":176,"column_start":5,"column_end":99}},{"value":"/ and written bytes. For the next call You should have adjusted the inputs accordingly.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":9782,"byte_end":9871,"line_start":177,"line_end":177,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":9876,"byte_end":9879,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ The call will try to decode and write as many bytes of output as available. It will be","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":9884,"byte_end":9974,"line_start":179,"line_end":179,"column_start":5,"column_end":95}},{"value":"/ much more optimized (and avoid intermediate buffering) if it is allowed to write a large","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":9979,"byte_end":10071,"line_start":180,"line_end":180,"column_start":5,"column_end":97}},{"value":"/ contiguous chunk at once.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10076,"byte_end":10105,"line_start":181,"line_end":181,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10110,"byte_end":10113,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (that are only available with the `std`","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10118,"byte_end":10206,"line_start":183,"line_end":183,"column_start":5,"column_end":93}},{"value":"/ feature).","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10211,"byte_end":10224,"line_start":184,"line_end":184,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10229,"byte_end":10232,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10237,"byte_end":10277,"line_start":186,"line_end":186,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10485,"byte_end":10496,"line_start":193,"line_end":193,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Decoder>::into_stream","value":"pub fn into_stream<W: Write>(&mut Self, W) -> IntoStream<, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a decoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a decoder into a writer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10407,"byte_end":10445,"line_start":191,"line_end":191,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10450,"byte_end":10473,"line_start":192,"line_end":192,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":11003,"byte_end":11012,"line_start":207,"line_end":207,"column_start":12,"column_end":21},"name":"has_ended","qualname":"<Decoder>::has_ended","value":"pub fn has_ended(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if the decoding has finished.","sig":null,"attributes":[{"value":"/ Check if the decoding has finished.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10710,"byte_end":10749,"line_start":202,"line_end":202,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10754,"byte_end":10757,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ No more output is produced beyond the end code that marked the finish of the stream. The","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10762,"byte_end":10854,"line_start":204,"line_end":204,"column_start":5,"column_end":97}},{"value":"/ decoder may have read additional bytes, including padding bits beyond the last code word","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10859,"byte_end":10951,"line_start":205,"line_end":205,"column_start":5,"column_end":97}},{"value":"/ but also excess bytes provided.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":10956,"byte_end":10991,"line_start":206,"line_end":206,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":11901,"byte_end":11906,"line_start":229,"line_end":229,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decoder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":11631,"byte_end":11660,"line_start":224,"line_end":224,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":11665,"byte_end":11668,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ This produce a decoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":11673,"byte_end":11767,"line_start":226,"line_end":226,"column_start":5,"column_end":99}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":11772,"byte_end":11859,"line_start":227,"line_end":227,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":11864,"byte_end":11889,"line_start":228,"line_end":228,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12157,"byte_end":12163,"line_start":239,"line_end":239,"column_start":12,"column_end":18},"name":"decode","qualname":"<IntoStream>::decode","value":"pub fn decode<impl BufRead: BufRead>(&mut Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader.","sig":null,"attributes":[{"value":"/ Decode data from a reader.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12024,"byte_end":12054,"line_start":236,"line_end":236,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12059,"byte_end":12062,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ This will read data until the stream is empty or an end marker is reached.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12067,"byte_end":12145,"line_start":238,"line_end":238,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12329,"byte_end":12339,"line_start":244,"line_end":244,"column_start":12,"column_end":22},"name":"decode_all","qualname":"<IntoStream>::decode_all","value":"pub fn decode_all<impl BufRead: BufRead>(Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Decode data from a reader, requiring an end marker.\n","sig":null,"attributes":[{"value":"/ Decode data from a reader, requiring an end marker.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12262,"byte_end":12317,"line_start":243,"line_end":243,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12816,"byte_end":12831,"line_start":256,"line_end":256,"column_start":12,"column_end":27},"name":"set_buffer_size","qualname":"<IntoStream>::set_buffer_size","value":"pub fn set_buffer_size(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of the intermediate decode buffer.","sig":null,"attributes":[{"value":"/ Set the size of the intermediate decode buffer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12436,"byte_end":12487,"line_start":248,"line_end":248,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12492,"byte_end":12495,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ A buffer of this size is allocated to hold one part of the decoded stream when no buffer is","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12500,"byte_end":12595,"line_start":250,"line_end":250,"column_start":5,"column_end":100}},{"value":"/ available and any decoding method is called. No buffer is allocated if `set_buffer` has","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12600,"byte_end":12691,"line_start":251,"line_end":251,"column_start":5,"column_end":96}},{"value":"/ been called. The buffer is reused.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12696,"byte_end":12734,"line_start":252,"line_end":252,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12739,"byte_end":12742,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12747,"byte_end":12759,"line_start":254,"line_end":254,"column_start":5,"column_end":17}},{"value":"/ This method panics if `size` is `0`.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12764,"byte_end":12804,"line_start":255,"line_end":255,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13545,"byte_end":13555,"line_start":271,"line_end":271,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<IntoStream>::set_buffer","value":"pub fn set_buffer(&mut Self, &'d mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Use a particular buffer as an intermediate decode buffer.","sig":null,"attributes":[{"value":"/ Use a particular buffer as an intermediate decode buffer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12965,"byte_end":13026,"line_start":261,"line_end":261,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13031,"byte_end":13034,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Calling this sets or replaces the buffer. When a buffer has been set then it is used","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13039,"byte_end":13127,"line_start":263,"line_end":263,"column_start":5,"column_end":93}},{"value":"/ instead of dynamically allocating a buffer. Note that the size of the buffer is critical","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13132,"byte_end":13224,"line_start":264,"line_end":264,"column_start":5,"column_end":97}},{"value":"/ for efficient decoding. Some optimization techniques require the buffer to hold one or more","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13229,"byte_end":13324,"line_start":265,"line_end":265,"column_start":5,"column_end":100}},{"value":"/ previous decoded words. There is also additional overhead from `write` calls each time the","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13329,"byte_end":13423,"line_start":266,"line_end":266,"column_start":5,"column_end":99}},{"value":"/ buffer has been filled.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13428,"byte_end":13455,"line_start":267,"line_end":267,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13460,"byte_end":13463,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13468,"byte_end":13480,"line_start":269,"line_end":269,"column_start":5,"column_end":17}},{"value":"/ This method panics if the `buffer` is empty.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":13485,"byte_end":13533,"line_start":270,"line_end":270,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":169},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"encode","qualname":"::encode","value":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","parent":null,"children":[{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":198},{"krate":0,"index":203},{"krate":0,"index":212},{"krate":0,"index":216},{"krate":0,"index":220},{"krate":0,"index":365},{"krate":0,"index":369},{"krate":0,"index":371},{"krate":0,"index":381},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":387},{"krate":0,"index":386},{"krate":0,"index":231},{"krate":0,"index":389},{"krate":0,"index":396},{"krate":0,"index":395},{"krate":0,"index":400},{"krate":0,"index":404},{"krate":0,"index":403},{"krate":0,"index":232},{"krate":0,"index":243},{"krate":0,"index":263},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":279},{"krate":0,"index":290},{"krate":0,"index":301},{"krate":0,"index":309},{"krate":0,"index":311},{"krate":0,"index":315},{"krate":0,"index":317}],"decl_id":null,"docs":" A module for all encoding needs.\n","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":3191,"byte_end":3216,"line_start":87,"line_end":87,"column_start":1,"column_end":26}},{"value":"/ A module for all encoding needs.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45065,"byte_end":45101,"line_start":1,"line_end":1,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45691,"byte_end":45698,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::encode::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":190}],"decl_id":null,"docs":" The state for encoding data with an LZW algorithm.","sig":null,"attributes":[{"value":"/ The state for encoding data with an LZW algorithm.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45402,"byte_end":45456,"line_start":11,"line_end":11,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45457,"byte_end":45460,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The same structure can be utilized with streams as well as your own buffers and driver logic.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45461,"byte_end":45558,"line_start":13,"line_end":13,"column_start":1,"column_end":98}},{"value":"/ It may even be possible to mix them if you are sufficiently careful not to lose any written","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45559,"byte_end":45654,"line_start":14,"line_end":14,"column_start":1,"column_end":96}},{"value":"/ data in the process.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45655,"byte_end":45679,"line_start":15,"line_end":15,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":191},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":46291,"byte_end":46301,"line_start":33,"line_end":33,"column_start":12,"column_end":22},"name":"IntoStream","qualname":"::encode::IntoStream","value":"IntoStream {  }","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" A encoding stream sink.","sig":null,"attributes":[{"value":"/ A encoding stream sink.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45953,"byte_end":45980,"line_start":23,"line_end":23,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45981,"byte_end":45984,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ See [`Encoder::into_stream`] on how to create this type.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":45985,"byte_end":46045,"line_start":25,"line_end":25,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":46046,"byte_end":46049,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::into_stream`]: struct.Encoder.html#method.into_stream","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":46050,"byte_end":46118,"line_start":27,"line_end":27,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49572,"byte_end":49575,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a new encoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49141,"byte_end":49211,"line_start":141,"line_end":141,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49216,"byte_end":49219,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49224,"byte_end":49317,"line_start":143,"line_end":143,"column_start":5,"column_end":98}},{"value":"/ original specification. In particular you will need to specify an `Lsb` bit oder to encode","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49322,"byte_end":49416,"line_start":144,"line_end":144,"column_start":5,"column_end":99}},{"value":"/ the data portion of a compressed `gif` image.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49421,"byte_end":49470,"line_start":145,"line_end":145,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49475,"byte_end":49478,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49483,"byte_end":49495,"line_start":147,"line_end":147,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49500,"byte_end":49503,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `2..=12`.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49508,"byte_end":49560,"line_start":149,"line_end":149,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":50404,"byte_end":50425,"line_start":170,"line_end":170,"column_start":12,"column_end":33},"name":"with_tiff_size_switch","qualname":"<Encoder>::with_tiff_size_switch","value":"pub fn with_tiff_size_switch(BitOrder, u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a TIFF compatible encoder with the specified bit order and symbol size.","sig":null,"attributes":[{"value":"/ Create a TIFF compatible encoder with the specified bit order and symbol size.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49962,"byte_end":50044,"line_start":161,"line_end":161,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":50049,"byte_end":50052,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ The algorithm for dynamically increasing the code symbol bit width is compatible with the","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":50057,"byte_end":50150,"line_start":163,"line_end":163,"column_start":5,"column_end":98}},{"value":"/ TIFF specification, which is a misinterpretation of the original algorithm for increasing","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":50155,"byte_end":50248,"line_start":164,"line_end":164,"column_start":5,"column_end":98}},{"value":"/ the code size. It switches one symbol sooner.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":50253,"byte_end":50302,"line_start":165,"line_end":165,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":50307,"byte_end":50310,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":50315,"byte_end":50327,"line_start":167,"line_end":167,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":50332,"byte_end":50335,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ The `size` needs to be in the interval `2..=12`.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":50340,"byte_end":50392,"line_start":169,"line_end":169,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51724,"byte_end":51736,"line_start":201,"line_end":201,"column_start":12,"column_end":24},"name":"encode_bytes","qualname":"<Encoder>::encode_bytes","value":"pub fn encode_bytes(&mut Self, &[u8], &mut [u8]) -> BufferResult","parent":null,"children":[],"decl_id":null,"docs":" Encode some bytes from `inp` into `out`.","sig":null,"attributes":[{"value":"/ Encode some bytes from `inp` into `out`.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51028,"byte_end":51072,"line_start":189,"line_end":189,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51077,"byte_end":51080,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ See [`into_stream`] for high-level functions (this interface is only available with the","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51085,"byte_end":51176,"line_start":191,"line_end":191,"column_start":5,"column_end":96}},{"value":"/ `std` feature) and [`finish`] for marking the input data as complete.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51181,"byte_end":51254,"line_start":192,"line_end":192,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51259,"byte_end":51262,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ When some input byte is invalid, i.e. is not smaller than `1 << size`, then that byte and","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51267,"byte_end":51360,"line_start":194,"line_end":194,"column_start":5,"column_end":98}},{"value":"/ all following ones will _not_ be consumed and the `status` of the result will signal an","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51365,"byte_end":51456,"line_start":195,"line_end":195,"column_start":5,"column_end":96}},{"value":"/ error. The result will also indicate that all bytes up to but not including the offending","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51461,"byte_end":51554,"line_start":196,"line_end":196,"column_start":5,"column_end":98}},{"value":"/ byte have been consumed. You may try again with a fixed byte.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51559,"byte_end":51624,"line_start":197,"line_end":197,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51629,"byte_end":51632,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ [`into_stream`]: #method.into_stream","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51637,"byte_end":51677,"line_start":199,"line_end":199,"column_start":5,"column_end":45}},{"value":"/ [`finish`]: #method.finish","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51682,"byte_end":51712,"line_start":200,"line_end":200,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51920,"byte_end":51931,"line_start":207,"line_end":207,"column_start":12,"column_end":23},"name":"into_stream","qualname":"<Encoder>::into_stream","value":"pub fn into_stream<W: Write>(&mut Self, W) -> IntoStream<, W>","parent":null,"children":[],"decl_id":null,"docs":" Construct a encoder into a writer.\n","sig":null,"attributes":[{"value":"/ Construct a encoder into a writer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51842,"byte_end":51880,"line_start":205,"line_end":205,"column_start":5,"column_end":43}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":51885,"byte_end":51908,"line_start":206,"line_end":206,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52628,"byte_end":52634,"line_start":223,"line_end":223,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Mark the encoding as in the process of finishing.","sig":null,"attributes":[{"value":"/ Mark the encoding as in the process of finishing.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52145,"byte_end":52198,"line_start":216,"line_end":216,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52203,"byte_end":52206,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ The next following call to `encode_bytes` which is able to consume the complete input will","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52211,"byte_end":52305,"line_start":218,"line_end":218,"column_start":5,"column_end":99}},{"value":"/ also try to emit an end code. It's not recommended, but also not unsound, to use different","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52310,"byte_end":52404,"line_start":219,"line_end":219,"column_start":5,"column_end":99}},{"value":"/ byte slices in different calls from this point forward and thus to 'delay' the actual end","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52409,"byte_end":52502,"line_start":220,"line_end":220,"column_start":5,"column_end":98}},{"value":"/ of the data stream. The behaviour after the end marker has been written is unspecified but","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52507,"byte_end":52601,"line_start":221,"line_end":221,"column_start":5,"column_end":99}},{"value":"/ sound.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52606,"byte_end":52616,"line_start":222,"line_end":222,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53193,"byte_end":53198,"line_start":239,"line_end":239,"column_start":12,"column_end":17},"name":"reset","qualname":"<Encoder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset all internal state.","sig":null,"attributes":[{"value":"/ Reset all internal state.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52922,"byte_end":52951,"line_start":234,"line_end":234,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52956,"byte_end":52959,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ This produce an encoder as if just constructed with `new` but taking slightly less work. In","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":52964,"byte_end":53059,"line_start":236,"line_end":236,"column_start":5,"column_end":100}},{"value":"/ particular it will not deallocate any internal allocations. It will also avoid some","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53064,"byte_end":53151,"line_start":237,"line_end":237,"column_start":5,"column_end":92}},{"value":"/ duplicate setup work.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53156,"byte_end":53181,"line_start":238,"line_end":238,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53486,"byte_end":53492,"line_start":250,"line_end":250,"column_start":12,"column_end":18},"name":"encode","qualname":"<IntoStream>::encode","value":"pub fn encode<impl BufRead: BufRead>(&mut Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader.","sig":null,"attributes":[{"value":"/ Encode data from a reader.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53315,"byte_end":53345,"line_start":246,"line_end":246,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53350,"byte_end":53353,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ This will drain the supplied reader. It will not encode an end marker after all data has","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53358,"byte_end":53450,"line_start":248,"line_end":248,"column_start":5,"column_end":97}},{"value":"/ been processed.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53455,"byte_end":53474,"line_start":249,"line_end":249,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53651,"byte_end":53661,"line_start":255,"line_end":255,"column_start":12,"column_end":22},"name":"encode_all","qualname":"<IntoStream>::encode_all","value":"pub fn encode_all<impl BufRead: BufRead>(Self, impl BufRead) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Encode data from a reader and an end marker.\n","sig":null,"attributes":[{"value":"/ Encode data from a reader and an end marker.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53591,"byte_end":53639,"line_start":254,"line_end":254,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54138,"byte_end":54153,"line_start":267,"line_end":267,"column_start":12,"column_end":27},"name":"set_buffer_size","qualname":"<IntoStream>::set_buffer_size","value":"pub fn set_buffer_size(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Set the size of the intermediate encode buffer.","sig":null,"attributes":[{"value":"/ Set the size of the intermediate encode buffer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53758,"byte_end":53809,"line_start":259,"line_end":259,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53814,"byte_end":53817,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ A buffer of this size is allocated to hold one part of the encoded stream when no buffer is","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53822,"byte_end":53917,"line_start":261,"line_end":261,"column_start":5,"column_end":100}},{"value":"/ available and any encoding method is called. No buffer is allocated if `set_buffer` has","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53922,"byte_end":54013,"line_start":262,"line_end":262,"column_start":5,"column_end":96}},{"value":"/ been called. The buffer is reused.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54018,"byte_end":54056,"line_start":263,"line_end":263,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54061,"byte_end":54064,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54069,"byte_end":54081,"line_start":265,"line_end":265,"column_start":5,"column_end":17}},{"value":"/ This method panics if `size` is `0`.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54086,"byte_end":54126,"line_start":266,"line_end":266,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54766,"byte_end":54776,"line_start":281,"line_end":281,"column_start":12,"column_end":22},"name":"set_buffer","qualname":"<IntoStream>::set_buffer","value":"pub fn set_buffer(&mut Self, &'d mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Use a particular buffer as an intermediate encode buffer.","sig":null,"attributes":[{"value":"/ Use a particular buffer as an intermediate encode buffer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54287,"byte_end":54348,"line_start":272,"line_end":272,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54353,"byte_end":54356,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ Calling this sets or replaces the buffer. When a buffer has been set then it is used","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54361,"byte_end":54449,"line_start":274,"line_end":274,"column_start":5,"column_end":93}},{"value":"/ instead of a dynamically allocating a buffer. Note that the size of the buffer is relevant","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54454,"byte_end":54548,"line_start":275,"line_end":275,"column_start":5,"column_end":99}},{"value":"/ for efficient encoding as there is additional overhead from `write` calls each time the","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54553,"byte_end":54644,"line_start":276,"line_end":276,"column_start":5,"column_end":96}},{"value":"/ buffer has been filled.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54649,"byte_end":54676,"line_start":277,"line_end":277,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54681,"byte_end":54684,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54689,"byte_end":54701,"line_start":279,"line_end":279,"column_start":5,"column_end":17}},{"value":"/ This method panics if the `buffer` is empty.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":54706,"byte_end":54754,"line_start":280,"line_end":280,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":320},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75105,"byte_end":75117,"line_start":3,"line_end":3,"column_start":12,"column_end":24},"name":"BufferResult","qualname":"::error::BufferResult","value":"BufferResult { consumed_in, consumed_out, status }","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"decl_id":null,"docs":" The result of a coding operation on a pair of buffer.\n","sig":null,"attributes":[{"value":"/ The result of a coding operation on a pair of buffer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":74969,"byte_end":75026,"line_start":1,"line_end":1,"column_start":1,"column_end":58}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75027,"byte_end":75093,"line_start":2,"line_end":2,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75188,"byte_end":75199,"line_start":5,"line_end":5,"column_start":9,"column_end":20},"name":"consumed_in","qualname":"::error::BufferResult::consumed_in","value":"usize","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input buffer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75124,"byte_end":75179,"line_start":4,"line_end":4,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75276,"byte_end":75288,"line_start":7,"line_end":7,"column_start":9,"column_end":21},"name":"consumed_out","qualname":"::error::BufferResult::consumed_out","value":"usize","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" The number of bytes written into the output buffer.\n","sig":null,"attributes":[{"value":"/ The number of bytes written into the output buffer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75212,"byte_end":75267,"line_start":6,"line_end":6,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75361,"byte_end":75367,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"name":"status","qualname":"::error::BufferResult::status","value":"std::result::Result<error::LzwStatus, error::LzwError>","parent":{"krate":0,"index":320},"children":[],"decl_id":null,"docs":" The status after returning from the write call.\n","sig":null,"attributes":[{"value":"/ The status after returning from the write call.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75301,"byte_end":75352,"line_start":8,"line_end":8,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75551,"byte_end":75563,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::error::StreamResult","value":"StreamResult { bytes_read, bytes_written, status }","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327}],"decl_id":null,"docs":" The result of coding into an output stream.\n","sig":null,"attributes":[{"value":"/ The result of coding into an output stream.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75401,"byte_end":75448,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"cfg(feature = \"std\")","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75449,"byte_end":75472,"line_start":13,"line_end":13,"column_start":1,"column_end":24}},{"value":"must_use = \"Contains a status with potential error information\"","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75473,"byte_end":75539,"line_start":14,"line_end":14,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75634,"byte_end":75644,"line_start":17,"line_end":17,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::error::StreamResult::bytes_read","value":"usize","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" The total number of bytes consumed from the reader.\n","sig":null,"attributes":[{"value":"/ The total number of bytes consumed from the reader.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75570,"byte_end":75625,"line_start":16,"line_end":16,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75720,"byte_end":75733,"line_start":19,"line_end":19,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::error::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" The total number of bytes written into the writer.\n","sig":null,"attributes":[{"value":"/ The total number of bytes written into the writer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75657,"byte_end":75711,"line_start":18,"line_end":18,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75900,"byte_end":75906,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"name":"status","qualname":"::error::StreamResult::status","value":"std::result::Result<(), std::io::Error>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" The possible error that occurred.","sig":null,"attributes":[{"value":"/ The possible error that occurred.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75746,"byte_end":75783,"line_start":20,"line_end":20,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75788,"byte_end":75791,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Note that when writing into streams it is not in general possible to recover from an error.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75796,"byte_end":75891,"line_start":22,"line_end":22,"column_start":5,"column_end":100}}]},{"kind":"TupleVariant","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76074,"byte_end":76076,"line_start":30,"line_end":30,"column_start":5,"column_end":7},"name":"Ok","qualname":"::error::LzwStatus::Ok","value":"LzwStatus::Ok","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" Everything went well.\n","sig":null,"attributes":[{"value":"/ Everything went well.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76044,"byte_end":76069,"line_start":29,"line_end":29,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76439,"byte_end":76449,"line_start":36,"line_end":36,"column_start":5,"column_end":15},"name":"NoProgress","qualname":"::error::LzwStatus::NoProgress","value":"LzwStatus::NoProgress","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" No bytes were read or written and no internal state advanced.","sig":null,"attributes":[{"value":"/ No bytes were read or written and no internal state advanced.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76082,"byte_end":76147,"line_start":31,"line_end":31,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76152,"byte_end":76155,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ If this is returned but your application can not provide more input data then decoding is","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76160,"byte_end":76253,"line_start":33,"line_end":33,"column_start":5,"column_end":98}},{"value":"/ definitely stuck for good and it should stop trying and report some error of its own. In","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76258,"byte_end":76350,"line_start":34,"line_end":34,"column_start":5,"column_end":97}},{"value":"/ other situations this may be used as a signal to refill an internal buffer.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76355,"byte_end":76434,"line_start":35,"line_end":35,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":412},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76528,"byte_end":76532,"line_start":38,"line_end":38,"column_start":5,"column_end":9},"name":"Done","qualname":"::error::LzwStatus::Done","value":"LzwStatus::Done","parent":{"krate":0,"index":407},"children":[],"decl_id":null,"docs":" No more data will be produced because an end marker was reached.\n","sig":null,"attributes":[{"value":"/ No more data will be produced because an end marker was reached.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76455,"byte_end":76523,"line_start":37,"line_end":37,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":407},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76028,"byte_end":76037,"line_start":28,"line_end":28,"column_start":10,"column_end":19},"name":"LzwStatus","qualname":"::error::LzwStatus","value":"pub enum LzwStatus {\n\n    /// Everything went well.\n    Ok,\n\n    /// No bytes were read or written and no internal state advanced.\n    ///\n    /// If this is returned but your application can not provide more input data then decoding is\n    /// definitely stuck for good and it should stop trying and report some error of its own. In\n    /// other situations this may be used as a signal to refill an internal buffer.\n    NoProgress,\n\n    /// No more data will be produced because an end marker was reached.\n    Done,\n}","parent":null,"children":[{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412}],"decl_id":null,"docs":" The status after successful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The status after successful coding of an LZW stream.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":75932,"byte_end":75988,"line_start":26,"line_end":26,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":420},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76991,"byte_end":77002,"line_start":49,"line_end":49,"column_start":5,"column_end":16},"name":"InvalidCode","qualname":"::error::LzwError::InvalidCode","value":"LzwError::InvalidCode","parent":{"krate":0,"index":419},"children":[],"decl_id":null,"docs":" The input contained an invalid code.","sig":null,"attributes":[{"value":"/ The input contained an invalid code.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76654,"byte_end":76694,"line_start":44,"line_end":44,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76699,"byte_end":76702,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ For decompression this refers to a code larger than those currently known through the prior","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76707,"byte_end":76802,"line_start":46,"line_end":46,"column_start":5,"column_end":100}},{"value":"/ decoding stages. For compression this refers to a byte that has no code representation due","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76807,"byte_end":76901,"line_start":47,"line_end":47,"column_start":5,"column_end":99}},{"value":"/ to being larger than permitted by the `size` parameter given to the Encoder.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76906,"byte_end":76986,"line_start":48,"line_end":48,"column_start":5,"column_end":85}}]},{"kind":"Enum","id":{"krate":0,"index":419},"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76639,"byte_end":76647,"line_start":43,"line_end":43,"column_start":10,"column_end":18},"name":"LzwError","qualname":"::error::LzwError","value":"pub enum LzwError {\n\n    /// The input contained an invalid code.\n    ///\n    /// For decompression this refers to a code larger than those currently known through the prior\n    /// decoding stages. For compression this refers to a byte that has no code representation due\n    /// to being larger than permitted by the `size` parameter given to the Encoder.\n    InvalidCode,\n}","parent":null,"children":[{"krate":0,"index":420}],"decl_id":null,"docs":" The error kind after unsuccessful coding of an LZW stream.\n","sig":null,"attributes":[{"value":"/ The error kind after unsuccessful coding of an LZW stream.","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":76537,"byte_end":76599,"line_start":41,"line_end":41,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7613,"byte_end":7620,"line_start":124,"line_end":124,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12000,"byte_end":12010,"line_start":235,"line_end":235,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":16922,"byte_end":16933,"line_start":368,"line_end":368,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":17764,"byte_end":17775,"line_start":397,"line_end":397,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":34219,"byte_end":34230,"line_start":755,"line_end":755,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":34642,"byte_end":34651,"line_start":773,"line_end":773,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":36534,"byte_end":36543,"line_start":842,"line_end":842,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":38385,"byte_end":38391,"line_start":911,"line_end":911,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":39738,"byte_end":39743,"line_start":955,"line_end":955,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":41712,"byte_end":41716,"line_start":1021,"line_end":1021,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49127,"byte_end":49134,"line_start":140,"line_end":140,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53291,"byte_end":53301,"line_start":245,"line_end":245,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":57321,"byte_end":57332,"line_start":365,"line_end":365,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":57820,"byte_end":57831,"line_start":384,"line_end":384,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":61421,"byte_end":61432,"line_start":491,"line_end":491,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":61886,"byte_end":61895,"line_start":513,"line_end":513,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":63524,"byte_end":63533,"line_start":579,"line_end":579,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":65094,"byte_end":65098,"line_start":644,"line_end":644,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":69459,"byte_end":69466,"line_start":756,"line_end":756,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":69551,"byte_end":69557,"line_start":762,"line_end":762,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":69736,"byte_end":69743,"line_start":772,"line_end":772,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":70020,"byte_end":70033,"line_start":782,"line_end":782,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":77035,"byte_end":77043,"line_start":52,"line_end":52,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":77288,"byte_end":77296,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":3183,"byte_end":3189,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":17}},{"kind":"Mod","span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\lib.rs","byte_start":3225,"byte_end":3231,"line_start":88,"line_end":88,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":169}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":7613,"byte_end":7620,"line_start":124,"line_end":124,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":38},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":12000,"byte_end":12010,"line_start":235,"line_end":235,"column_start":20,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":40},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":16922,"byte_end":16933,"line_start":368,"line_end":368,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":61},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":17764,"byte_end":17775,"line_start":397,"line_end":397,"column_start":34,"column_end":45},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":61},"to":{"krate":0,"index":47}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":34219,"byte_end":34230,"line_start":755,"line_end":755,"column_start":21,"column_end":32},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":61},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":34642,"byte_end":34651,"line_start":773,"line_end":773,"column_start":21,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":351},"to":{"krate":0,"index":52}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":36534,"byte_end":36543,"line_start":842,"line_end":842,"column_start":21,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":358},"to":{"krate":0,"index":52}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":38385,"byte_end":38391,"line_start":911,"line_end":911,"column_start":6,"column_end":12},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":73},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":39738,"byte_end":39743,"line_start":955,"line_end":955,"column_start":6,"column_end":11},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":77},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\decode.rs","byte_start":41712,"byte_end":41716,"line_start":1021,"line_end":1021,"column_start":6,"column_end":10},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":49127,"byte_end":49134,"line_start":140,"line_end":140,"column_start":6,"column_end":13},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":53291,"byte_end":53301,"line_start":245,"line_end":245,"column_start":20,"column_end":30},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":191},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":57321,"byte_end":57332,"line_start":365,"line_end":365,"column_start":17,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":57820,"byte_end":57831,"line_start":384,"line_end":384,"column_start":30,"column_end":41},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":203},"to":{"krate":0,"index":198}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":61421,"byte_end":61432,"line_start":491,"line_end":491,"column_start":17,"column_end":28},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":203},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":61886,"byte_end":61895,"line_start":513,"line_end":513,"column_start":17,"column_end":26},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":212},"to":{"krate":0,"index":220}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":63524,"byte_end":63533,"line_start":579,"line_end":579,"column_start":17,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":216},"to":{"krate":0,"index":220}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":65094,"byte_end":65098,"line_start":644,"line_end":644,"column_start":6,"column_end":10},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":69459,"byte_end":69466,"line_start":756,"line_end":756,"column_start":18,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":371},"to":{"krate":2,"index":2022}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":69551,"byte_end":69557,"line_start":762,"line_end":762,"column_start":18,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":389},"to":{"krate":2,"index":2022}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":69736,"byte_end":69743,"line_start":772,"line_end":772,"column_start":30,"column_end":37},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":371},"to":{"krate":2,"index":1952}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\encode.rs","byte_start":70020,"byte_end":70033,"line_start":782,"line_end":782,"column_start":24,"column_end":37},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":383},"to":{"krate":2,"index":1952}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":77035,"byte_end":77043,"line_start":52,"line_end":52,"column_start":29,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":419},"to":{"krate":2,"index":6567}},{"span":{"file_name":"C:\\Users\\Pranav\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\weezl-0.1.3\\src\\error.rs","byte_start":77288,"byte_end":77296,"line_start":61,"line_end":61,"column_start":28,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":419},"to":{"krate":1,"index":1720}}]}